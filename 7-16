local composer = require( "composer" )

local scene = composer.newScene()
local physics = require( "physics" )

physics.start()
physics.setGravity( 0, 25 )
centerX = display.contentWidth * .5
centerY = display.contentHeight * .5

--physics.setDrawMode( "hybrid" )
local playerBullets = {}
local dPad
local upArrow
local downArrow
local leftArrow
local rightArrow = nill
local knight = nill
local ninja
local jumpButton
local shootButton
local backGroup
local mainGroup
local map = nill
local function onRightArrowTouch(event)
	if (event.phase == "began") then
		if knight.sequence ~= "run" then
			knight.sequence = "run"
			knight:setSequence( "run" )
			knight:play()
		end
	elseif (event.phase =="ended") then
		if knight.sequence ~= "idle" then
			knight.sequence = "idle"
			knight:setSequence("idle")
			knight:play()
		end
	end
	return true
end

local moveKnight = function(event)
	if knight.sequence == "run" then
		tranaition.moveBy( knight,{
			x = 10,
			y = 0,
			time = 0
		    })
	end
end

local function swapSheet()
	knight:setSequence( "walk" )
	knight:play()
	print("walk")
end
local function aSheet()
	ninja:setSequence( "Attack" )
	ninja:play()
	ninja.isBodyActive = false
	print("Attack")
end

function upArrowHandle()
	transition.moveBy( knight, {
    	 x = 0,
    	 y = -100,
    	 time = 100
    	 } )
end

local function downArrowHandle()
	transition.moveBy( knight, {
    	 x = 0,
    	 y = 50,
    	 time = 100
    	 } )

end

local function leftArrowHandle()
	

    	transition.moveBy( knight, {
    	 x = -50,
    	 y = 0,
    	 time = 100
    	 } )
	
end

local function rightArrowHandle( )


    	transition.moveBy( knight, {
    	 x = 50,
    	 y = 0,
    	 time = 100
    	 } )

end
local function checkninjaPosition( event )
	if knight.y > display.contentHeight + 500 then
    	knight.x = display.contentCenterX
    	knight.y = display.contentCenterY
	end
end
local function jumpHandle()

	knight:setLinearVelocity( 0, -750 )
	
end

function scene:create( event )
	local sceneGroup = self.view
	-- Code here runs when the scene is first created but has not yet appeared on screen

	physics.pause()  -- Temporarily pause the physics engine
	backGroup = display.newGroup()  -- Display group for the background image
	sceneGroup:insert( backGroup )  -- Insert into the scene's view group

	mainGroup = display.newGroup()  
	sceneGroup:insert( mainGroup )  -- Insert into the scene's view group
	local theGround = display.newImageRect(backGroup,"land.png", 1024,128 )
	
	theGround.x = display.contentCenterX
	theGround.y = display.contentHeight 
	theGround.id = "the ground"
	physics.addBody( theGround, "static", {
		friction = 0.5,
		bounce = 0.3
		} )
	
	local theGround2 = display.newImage( "land.png" )
    theGround2.x = 1520
    theGround2.y = display.contentHeight
    theGround2.id = "the ground"
    physics.addBody( theGround2, "static", { 
    friction = 0.5, 
    bounce = 0.3 
	} )
	dPad = display.newImageRect(backGroup, "d-pad.png", 100, 100 )
	--sceneGroup:insert(dPad)
	dPad.x = 50
	dPad.y = display.contentHeight -30
	dPad.id = "d-pad"
	upArrow = display.newImageRect(mainGroup, "upArrow.png", 30, 20 )
	--sceneGroup:insert(upArrow)
	upArrow.x = 50
	upArrow.y = display.contentHeight - 65
	upArrow.id = "up arrow"
	downArrow = display.newImageRect( mainGroup,"downArrow.png", 30,20 )
	downArrow.x = 50
	downArrow.y = display.contentHeight + 5
	downArrow.id = "down arrow"
	leftArrow = display.newImageRect( mainGroup,"leftArrow.png", 20, 30 )
	leftArrow.x =15
	leftArrow.y = display.contentHeight - 30
	leftArrow.id = "left arrow"
	rightArrow = display.newImageRect( mainGroup, "rightArrow.png", 20,30 )
	rightArrow.x = 85
	rightArrow.y = display.contentHeight - 30
	rightArrow.id = "right arrow"

	local sheetOptionKnight =
	{
		width = 881/5,
		height = 424/2,
		numFrames = 10
	}

	local sheetKnight = graphics.newImageSheet( "knightIdle.png", sheetOptionKnight )

	local sheetOptionsWalk =
	{
		width = 1057/6,
		height = 424/2,
		numFrames = 10
	}
	local sheetWalkingKnight = graphics.newImageSheet( "knightAttack.png", sheetOptionsWalk )
	local sequence_data = {
		{
			name = "idle",
			start = 1,
			count = 10,
			time = 800,
			loopCount = 0,
			sheet = knight
		},
		{
			name = "walk",
			start = 1,
			count = 10,
			time = 800,
			loopCount = 0,
			sheet = sheetWalkingKnight
		}
	}
	knight = display.newSprite( mainGroup, sheetKnight, sequence_data )
	knight.x = centerX - 100
	knight.y = centerY - 10

	knight.id = "knight"
	knight.xScale = 1.17
	knight.yScale = 1.17
	physics.addBody( knight, "dynamic", {
		density = 3.0,
		friction = 0.5,
		bounce = 0.3
	} )
			
	jumpButton = display.newImageRect(mainGroup, "jumpButton.png" ,40,40)
	jumpButton.x = 150
	jumpButton.y = display.contentHeight - 30
	jumpButton.id = "jump button"
	jumpButton.alpha = 0.5

	upArrow:addEventListener( "tap", upArrowHandle )
	downArrow:addEventListener( "tap", downArrowHandle )
	leftArrow:addEventListener( "tap", leftArrowHandle )
	rightArrow:addEventListener( "tap", rightArrowHandle )
	jumpButton:addEventListener( "tap", jumpHandle )

end


function scene:show( event )

	local sceneGroup = self.view
	local phase = event.phase

	if ( phase == "will" ) then
		-- Code here runs when the scene is still off screen (but is about to come on screen)
        rightArrow:addEventListener( "touch", onRightArrowTouch )
	elseif ( phase == "did" ) then
		-- Code here runs when the scene is entirely on screen
		physics.start()
		knight:play()
		timer.performWithDelay( 2250, swapSheet )
		Runtime:addEventListener( "enterFrame", moveKnight )
	end
end
-- hide()
function scene:hide( event )

	local sceneGroup = self.view
	local phase = event.phase

	if ( phase == "will" ) then
		-- Code here runs when the scene is on screen (but is about to go off screen)

	elseif ( phase == "did" ) then
		-- Code here runs immediately after the scene goes entirely off screen
		rightArrow:addEventListener( "touch", onRightArrowTouch )
		Runtime:addEventListener( "enterFrame", moveKnight )
	end
end


-- destroy()
function scene:destroy( event )

	local sceneGroup = self.view
	-- Code here runs prior to the removal of scene's view

end


-- -----------------------------------------------------------------------------------
-- Scene event function listeners
-- -----------------------------------------------------------------------------------
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
scene:addEventListener( "hide", scene )
scene:addEventListener( "destroy", scene )
-- -----------------------------------------------------------------------------------

return scene
